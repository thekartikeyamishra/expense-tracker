# -*- coding: utf-8 -*-
"""expensetracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fzpkqySJCoCEK3UPflRXD12Qb8HVvp50
"""

!pip install pandas matplotlib plotly ipywidgets

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from ipywidgets import interact, widgets
from IPython.display import display, clear_output

def generate_expense_csv():
    data = {
        "Date": [
            "2025-01-01", "2025-01-02", "2025-01-05", "2025-01-07",
            "2025-01-10", "2025-01-12", "2025-01-15", "2025-01-18",
            "2025-01-20", "2025-01-25"
        ],
        "Category": [
            "Food", "Transport", "Shopping", "Bills",
            "Entertainment", "Food", "Transport", "Shopping",
            "Bills", "Miscellaneous"
        ],
        "Amount": [200, 150, 500, 1000, 300, 250, 200, 700, 1200, 400]
    }
    df = pd.DataFrame(data)
    df.to_csv("expenses.csv", index=False)
    print("Sample expense data saved to 'expenses.csv'.")

generate_expense_csv()

def load_expense_data(file_path):
    try:
        data = pd.read_csv(file_path)
        data['Date'] = pd.to_datetime(data['Date'])
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def visualize_expenses(data):
    print("Expense Data Preview:")
    display(data)

    print("\nDynamic Graphs:")

    @interact(Category=data['Category'].unique().tolist() + ["All"])
    def category_expense_graph(Category="All"):
        clear_output(wait=True)
        if Category == "All":
            filtered_data = data
        else:
            filtered_data = data[data["Category"] == Category]

        fig = px.bar(filtered_data, x="Date", y="Amount", color="Category",
                     title=f"Expenses for Category: {Category}",
                     labels={"Amount": "Expense Amount (₹)"})
        fig.update_layout(xaxis_title="Date", yaxis_title="Amount (₹)")
        fig.show()

    def filter_by_date_range(start_date, end_date):
        """Filter data by date range."""
        filtered_data = data[(data["Date"] >= pd.to_datetime(start_date)) &
                             (data["Date"] <= pd.to_datetime(end_date))]
        if filtered_data.empty:
            print("No expenses in the selected date range.")
        else:
            fig = px.line(filtered_data, x="Date", y="Amount", color="Category",
                          title="Expense Trend Over Time",
                          labels={"Amount": "Expense Amount (₹)"})
            fig.update_layout(xaxis_title="Date", yaxis_title="Amount (₹)")
            fig.show()

    print("\nFilter by Date Range:")
    start_date = widgets.DatePicker(description="Start Date")
    end_date = widgets.DatePicker(description="End Date")
    filter_button = widgets.Button(description="Filter")

    def on_filter_button_click(b):
        clear_output(wait=True)
        display(start_date, end_date, filter_button)
        filter_by_date_range(start_date.value, end_date.value)

    filter_button.on_click(on_filter_button_click)
    display(start_date, end_date, filter_button)

def main():
    print("Welcome to the Interactive Expense Tracker!")
    print("Generating sample expense data...")

    data = load_expense_data("expenses.csv")
    if data is not None:
        visualize_expenses(data)
    else:
        print("Failed to load expense data. Please try again.")

main()

